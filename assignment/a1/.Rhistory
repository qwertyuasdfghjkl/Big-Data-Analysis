byUser <- byUser[3]
for(j in byUser) {
ratingsF <- append(ratingsF, j)
}
} else {
byUser <- byUser[ , 3]
for(j in byUser) {
ratingsF <- append(ratingsF, j)
}
}
}
ratingsF <- c()
CAF <- User[which(User$Gender == 'F' & User$State == 'CA'), ]
CAF <- CAF[ , 1]
for(i in CAF) {
byUser <- mwhich(X, "UserID", i, "eq")
byUser <- X[byUser, ]
if(identical(nrow(byUser), NULL)){
byUser <- byUser[3]
for(j in byUser) {
ratingsF <- append(ratingsF, j)
}
} else {
byUser <- byUser[ , 3]
for(j in byUser) {
ratingsF <- append(ratingsF, j)
}
}
}
z <- c("Male From NY", "Female from CA")
histData <- lapply(z, get, envir=environment())
z <- c("ratingsM", "ratingsF")
histData <- lapply(z, get, envir=environment())
names(histData) <- z
boxplot(histData)
z <- c("ratingsM", "ratingsF")
histData <- lapply(z, get, envir=environment())
names(histData) <- z
boxplot(histData names = c("Male from NY", "Female from CA"))
z <- c("ratingsM", "ratingsF")
histData <- lapply(z, get, envir=environment())
names(histData) <- z
boxplot(histData)
head(X)
head(X1)
install.packages("biganalytics")
library(biganalytics)
head(X)
head(X1)
#install.packages("biganalytics")
library(biganalytics)
head(X)
head(X1)
lowerBound <- c()
upperBound <- c()
for (i in 1:N) {
uni <- runif(100, 0, 1)
samp <- c()
for (j in 1:100) {
samp <- append(samp, invCDF(uni[j], t), after = length(samp))
}
upperBound <- append(upperBound, 1 + 1/mean(log(samp)) + 1.96/(sqrt(n*mean(log(samp))^2)), after = length(upperBound))
lowerBound <- append(lowerBound, 1 + 1/mean(log(samp)) - 1.96/(sqrt(n*mean(log(samp))^2)), after = length(lowerBound))
}
set.seed(1003643587)
N <- 10000
n <- 100
t <- 2
invCDF <- function(u, t) {
return(-1/(u-1))
}
lowerBound <- c()
upperBound <- c()
for (i in 1:N) {
uni <- runif(100, 0, 1)
samp <- c()
for (j in 1:100) {
samp <- append(samp, invCDF(uni[j], t), after = length(samp))
}
upperBound <- append(upperBound, 1 + 1/mean(log(samp)) + 1.96/(sqrt(n*mean(log(samp))^2)), after = length(upperBound))
lowerBound <- append(lowerBound, 1 + 1/mean(log(samp)) - 1.96/(sqrt(n*mean(log(samp))^2)), after = length(lowerBound))
}
lowerBound = replace(lowerBound, lowerBound <= t, 1)
lowerBound = replace(lowerBound, lowerBound > t, 0)
upperBound = replace(upperBound, upperBound < t, 0)
upperBound = replace(upperBound, upperBound >= t, 1)
k <- 0
for (l in 1:N) {
if(upperBound[l] == 1 & lowerBound[l] == 1) {
k <- k + 1
}
}
print(k/N)
set.seed(1003643587)
N <- 10
n <- c(10,100,1000,10000)
# function that samples from uniform
samples <- function(n) {
samplesReplaced = runif(n2, min = 0, max = 1)
samplesReplaced = replace(samplesReplaced, samplesReplaced<0.5, -1)
samplesReplaced = replace(samplesReplaced, samplesReplaced>= 0.5, 1)
return(samplesReplaced)
}
set.seed(1003643587)
n <- c(10,100,1000,10000)
x <- log(n, base = 10)
mu <- (1/2)*1 + (1/2)*(-1)
avg <- c()
for (n2 in n) {
samplen <- samples(n2)
avg <- append(avg, sum(samplen)/n2)
}
y <- avg - mu
plot(x,y, xlab = "log10(n)", ylab = "Xbar - Âµ")
abline(h=0, col="blue")
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10), after = length(mean10)
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10) after = length(mean10)
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10, after = length(mean10))
}
mean10
set.seed(1003643587)
N <- 10
n <- c(10,100,1000,10000)
# function that samples from uniform
samples <- function(n) {
samplesReplaced = runif(n2, min = 0, max = 1)
samplesReplaced = replace(samplesReplaced, samplesReplaced<0.5, -1)
samplesReplaced = replace(samplesReplaced, samplesReplaced>= 0.5, 1)
return(samplesReplaced)
}
set.seed(1003643587)
N <- 10
n <- c(10,100,1000,10000)
# function that samples from uniform
samples <- function(n) {
samplesReplaced = runif(n, min = 0, max = 1)
samplesReplaced = replace(samplesReplaced, samplesReplaced<0.5, -1)
samplesReplaced = replace(samplesReplaced, samplesReplaced>= 0.5, 1)
return(samplesReplaced)
}
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10, after = length(mean10))
}
mean10
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10)
}
mean10
set.seed(1003643587)
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10)
}
mean10
set.seed(1003643587)
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10)
mean1000 <- append(mean1000, sum(samples(1000))/1000)
mean10000 <- append(mean10000, sum(samples(10000))/10000)
}
hist10 <- sqrt(10)*mean10/sigma
hist(hist10)
hist1000 <- sqrt(1000)*mean1000/sigma
hist(hist1000)
hist10000 <- sqrt(10000)*mean10000/sigma
hist(hist10000)
hist10 <- sqrt(10)*mean10/sigma
hist(hist10)
qqplot(hist10)
install.packages("car")
library(car)
#install.packages("car")
library(car)
set.seed(1003643587)
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10)
mean1000 <- append(mean1000, sum(samples(1000))/1000)
mean10000 <- append(mean10000, sum(samples(10000))/10000)
}
hist10 <- sqrt(10)*mean10/sigma
hist(hist10)
qqplot(hist10)
set.seed(1003643587)
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10, after = length(mean10))
mean1000 <- append(mean1000, sum(samples(1000))/1000)
mean10000 <- append(mean10000, sum(samples(10000))/10000)
}
hist10 <- sqrt(10)*mean10/sigma
hist(hist10)
qqplot(hist10)
hist10 <- sqrt(10)*mean10/sigma
hist(hist10)
qqPlot(hist10)
set.seed(1003643587)
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10)
mean1000 <- append(mean1000, sum(samples(1000))/1000)
mean10000 <- append(mean10000, sum(samples(10000))/10000)
}
hist10 <- sqrt(10)*mean10/sigma
hist(hist10)
qqPlot(hist10)
hist10 <- sqrt(10)*mean10/sigma
hist(hist10)
qqPlot(hist10)
hist1000 <- sqrt(1000)*mean1000/sigma
hist(hist1000)
qqPlot(hist10)
hist1000 <- sqrt(1000)*mean1000/sigma
hist(hist1000)
qqPlot(hist1000)
hist10000 <- sqrt(10000)*mean10000/sigma
hist(hist10000)
qqPlot(hist10000)
logVals = c(log(n10, base = 10), log(100, base = 10), log(1000, base = 10), log(10000, base = 10))
logVals = c(log(10, base = 10), log(100, base = 10), log(1000, base = 10), log(10000, base = 10))
Y10 <- rnorm(10,0,1)
Y100 <- rnorm(100,0,1)
Y1000 <- rnorm(1000,0,1)
Y10000 <- rnorm(10000,0,1)
data10 <- sqrt(10)*mean10 - Y10
data10 <- averag(data10, 0.001)
averag <- function(data, e) {
data <- abs(data)
data <- replace(data, data > e, 1)
data <- replace(data, data <= e, 0)
return(data)
}
logVals = c(log(10, base = 10), log(100, base = 10), log(1000, base = 10), log(10000, base = 10))
Y10 <- rnorm(10,0,1)
Y100 <- rnorm(100,0,1)
Y1000 <- rnorm(1000,0,1)
Y10000 <- rnorm(10000,0,1)
data10 <- sqrt(10)*mean10 - Y10
data10 <- averag(data10, 0.001)
data100 <- sqrt(100)*mean100 - Y100
set.seed(1003643587)
mu <- 0
# var(x) = E(X^2) = 1
# sigma^2 = 1
sigma <- 1
mean10 <- c()
mean100 <- c()
mean1000 <- c()
mean10000 <- c()
for (i in 1:10000) {
mean10 <- append(mean10, sum(samples(10))/10)
mean100 <- append(mean100, sum(samples(100))/100)
mean1000 <- append(mean1000, sum(samples(1000))/1000)
mean10000 <- append(mean10000, sum(samples(10000))/10000)
}
logVals = c(log(10, base = 10), log(100, base = 10), log(1000, base = 10), log(10000, base = 10))
Y10 <- rnorm(10,0,1)
Y100 <- rnorm(100,0,1)
Y1000 <- rnorm(1000,0,1)
Y10000 <- rnorm(10000,0,1)
data10 <- sqrt(10)*mean10 - Y10
data10 <- averag(data10, 0.001)
data100 <- sqrt(100)*mean100 - Y100
data100 <- averag(data100, 0.001)
data1000 <- sqrt(1000)*mean1000 - Y1000
data1000 <- averag(data1000, 0.001)
data10000 <- sqrt(10000)*mean10000 - Y10000
data10000 <- averag(data10000, 0.001)
plotData <- c(mean(data10), mean(data100), mean(data1000), mean(data10000))
plot(logVals, plotData)
set.seed(1003643587)
n <- c(10,100,1000,10000)
mu <- (1/2)*1 + (1/2)*(-1)
x <- log(n, base = 10)
N = 10000
y <- c(0,0,0,0)
for (i in 1:N) {
avg <- c()
for (n2 in n) {
samplen <- samples(n2)
avg <- append(avg, sum(samplen)/n2)
}
if (abs(avg[1] - mu) > 0.05) {
y[1] = y[1] + 1
}
if (abs(avg[2] - mu) > 0.05) {
y[2] = y[2] + 1
}
if (abs(avg[3] - mu) > 0.05) {
y[3] = y[3] + 1
}
if (abs(avg[4] - mu) > 0.05) {
y[4] = y[4] + 1
}
}
y <- y/N
plot(x,y, main = "epsilon = 0.05", xlab = "log10(n)", ylab = "y")
abline(h=0, col="blue")
set.seed(1003643587)
n <- c(10,100,1000,10000)
mu <- (1/2)*1 + (1/2)*(-1)
x <- log(n, base = 10)
N = 10000
y <- c(0,0,0,0)
for (i in 1:N) {
avg <- c()
for (n2 in n) {
samplen <- samples(n2)
avg <- append(avg, sum(samplen)/n2)
}
if (abs(avg[1] - mu) > 0.5) {
y[1] = y[1] + 1
}
if (abs(avg[2] - mu) > 0.5) {
y[2] = y[2] + 1
}
if (abs(avg[3] - mu) > 0.5) {
y[3] = y[3] + 1
}
if (abs(avg[4] - mu) > 0.5) {
y[4] = y[4] + 1
}
}
y <- y/N
plot(x,y, main = "epsilon = 0.5", xlab = "log10(n)", ylab = "y")
abline(h=0, col="blue")
set.seed(1003643587)
n <- c(10,100,1000,10000)
mu <- (1/2)*1 + (1/2)*(-1)
x <- log(n, base = 10)
N = 10000
y <- c(0,0,0,0)
for (i in 1:N) {
avg <- c()
for (n2 in n) {
samplen <- samples(n2)
avg <- append(avg, sum(samplen)/n2)
}
if (abs(avg[1] - mu) > 0.1) {
y[1] = y[1] + 1
}
if (abs(avg[2] - mu) > 0.1) {
y[2] = y[2] + 1
}
if (abs(avg[3] - mu) > 0.1) {
y[3] = y[3] + 1
}
if (abs(avg[4] - mu) > 0.1) {
y[4] = y[4] + 1
}
}
y <- y/N
plot(x,y, main = "epsilon = 0.1", xlab = "log10(n)", ylab = "y")
abline(h=0, col="blue")
set.seed(1003643587)
n <- c(10,100,1000,10000)
mu <- (1/2)*1 + (1/2)*(-1)
x <- log(n, base = 10)
N = 10000
y <- c(0,0,0,0)
for (i in 1:N) {
avg <- c()
for (n2 in n) {
samplen <- samples(n2)
avg <- append(avg, sum(samplen)/n2)
}
if (abs(avg[1] - mu) > 0.05) {
y[1] = y[1] + 1
}
if (abs(avg[2] - mu) > 0.05) {
y[2] = y[2] + 1
}
if (abs(avg[3] - mu) > 0.05) {
y[3] = y[3] + 1
}
if (abs(avg[4] - mu) > 0.05) {
y[4] = y[4] + 1
}
}
y <- y/N
plot(x,y, main = "epsilon = 0.05", xlab = "log10(n)", ylab = "y")
abline(h=0, col="blue")
ratingsM <- c()
newYorkM <- User[which(User$Gender == 'M' & User$State == 'New York'), ]
newYorkM <- newYorkM[ , 1]
for(i in newYorkM) {
byUser <- mwhich(X, "UserID", i, "eq")
byUser <- X[byUser, ]
if(identical(nrow(byUser), NULL)){
byUser <- byUser[3]
ratingsM <- append(ratingsM)
} else {
byUser <- byUser[ , 3]
ratingsM <- append(ratingsM)
}
}
ratingsM <- c()
newYorkM <- User[which(User$Gender == 'M' & User$State == 'New York'), ]
newYorkM <- newYorkM[ , 1]
for(i in newYorkM) {
byUser <- mwhich(X, "UserID", i, "eq")
byUser <- X[byUser, ]
if(identical(nrow(byUser), NULL)){
byUser <- byUser[3]
ratingsM <- append(ratingsM, byUser)
} else {
byUser <- byUser[ , 3]
ratingsM <- append(ratingsM, byUser)
}
}
ratingsF <- c()
CAF <- User[which(User$Gender == 'F' & User$State == 'CA'), ]
CAF <- CAF[ , 1]
for(i in CAF) {
byUser <- mwhich(X, "UserID", i, "eq")
byUser <- X[byUser, ]
if(identical(nrow(byUser), NULL)){
byUser <- byUser[3]
ratingsF <- append(ratingsF, byUser)
} else {
byUser <- byUser[ , 3]
ratingsF <- append(ratingsF, byUser)
}
}
z <- c("ratingsM", "ratingsF")
histData <- lapply(z, get, envir=environment())
names(histData) <- z
boxplot(histData)
knitr::opts_chunk$set(echo = TRUE)
ratingsF <- c()
CAF <- User[which(User$Gender == 'F' & User$State == 'CA'), ]
CAF <- CAF[ , 1]
for(i in CAF) {
byUser <- mwhich(X, "UserID", i, "eq")
byUser <- X[byUser, ]
if(identical(nrow(byUser), NULL)){
byUser <- byUser[3]
ratingsF <- append(ratingsF, byUser)
} else {
byUser <- byUser[ , 3]
ratingsF <- append(ratingsF, byUser)
}
}
