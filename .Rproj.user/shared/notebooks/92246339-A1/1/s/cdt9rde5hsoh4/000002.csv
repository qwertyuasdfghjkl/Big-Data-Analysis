"0","# Set up simulation"
"0","set.seed(1003023532)"
"0","N = 10000"
"0","n = 100"
"0","theta = 2"
"0",""
"0","# vectors for storing upper and lower bounds of our CI's"
"0","upper = c()"
"0","lower = c()"
"0",""
"0","for (i in 1:N) {"
"0","  # Generate uniform rvs"
"0","  uniform_random_var = runif(n, min = 0, max = 1)"
"0",""
"0","  test_sample = c()"
"0","  # Function for inverse cdf which taking in uniform(0,1) rvs will give our pdf"
"0","  inverseCdf = function(u, theta) {"
"0","    return(-1/(u-1))"
"0","  }"
"0",""
"0","  # find xi's"
"0","  for (j in 1:n) {"
"0","    test_sample = append(test_sample, inverseCdf(uniform_random_var[j], theta), after = length(test_sample))"
"0","  }"
"0",""
"0","  # Find 95% CI"
"0","  upper = append(upper, 1 + 1/mean(log(test_sample)) + 1.96/(sqrt(n*mean(log(test_sample))^2)), after = length(upper))"
"0","  lower = append(lower, 1 + 1/mean(log(test_sample)) - 1.96/(sqrt(n*mean(log(test_sample))^2)), after = length(lower))"
"0",""
"0","}"
"0",""
"0","# Check if theta is in the confidence intervals"
"0","upper = replace(upper, upper < theta, 0)"
"0","upper = replace(upper, upper >= theta, 1)"
"0","lower = replace(lower, lower <= theta, 1)"
"0","lower = replace(lower, lower > theta, 0)"
"0",""
"0","counter = 0"
"0",""
"0","for (i in 1:N) {"
"0","  if (upper[i] == 1 & lower[i] == 1) {"
"0","    counter = counter + 1"
"0","  }"
"0","}"
"0",""
"0","# Print out 1-alpha"
"0","counter/N"
"1","[1]"
"1"," 0.9492"
"1","
"
